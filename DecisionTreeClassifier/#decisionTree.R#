#run with 'Rscript decisionTree.R'

entropy <- function(data)
{
   cnt <- length(unique(data))
   t <- ftable(data)   
   num <- length(data)
   total <- 0
   for(i in 1:cnt)
   {
      total <- total + t[i]/num * log2(t[i]/num)
   }
   
   return(-total)
}

gains <- function(data, entropy)
{
   total <- 0
   l <- levels(data[,1])
   #print(data[,1])
   for(i in 1:length(l))
   {
      #print(l[i])
      #print(data[data[,1] == l[i],])
      d <- data[data[,1] == l[i],]
      print((length(d[,1]) / length(data[,1])) * entropy(d[,2]))
      total <- total + (length(d[,1]) / length(data[,1])) * entropy(d[,2])
   }
   print(total)
   return(total)
}

#sets up the data and trains it
builder <- function(trainData, used = NULL)
{
   #print("Builder:")
   e <- entropy(trainData[,ncol(trainData)])   
   #print(e)
   res <- 100

   for(i in 1:(ncol(trainData) - 1))
   {
      #print(trainData[,i])
      tmp <- gains(cbind.data.frame(trainData[,i], trainData[,ncol(trainData)]), e)
      if(tmp < res)
      {
         res <- tmp
      }
   }

   
   #return(tree);
}

#A classifier for determining which iris it is
classifier <- function(data, test)
{
   return(data$V5[1])
}

#tests the training data against the test data
tester <- function(data, testData)
{
   #sets the number of correct results to 0)
   results <- 0

   #loops through to find all that match
   for(i in 1:nrow(testData))
   {
      if(classifier(trainData,testData[i,1:4]) == testData[i,5])
         results <- results + 1
   }
   return(results);
}

discretize <- function(data)
{
   for(i in 1:ncol(data))
   {
      if(is.numeric(data[,i]))
      {
         data[,i] <- cut(data[,i], breaks=2)
      }
   }
   return(data)
}

#Reads in the data from a file
#filename <- readline("File Name?: ")
filename <- "../iris.data"
data <- read.csv(filename, header=F)

#scrambles it up
data <- discretize(data[sample(nrow(data)),])

#makes the training dataset (the first 70%)
trainData<- data[c(1:(nrow(data) * .7)),]

#makes the testing dataset (the last 30%)
testData <- data[c((nrow(data)*.7 + 1):nrow(data)),]
#print(data)
builder(trainData)
#data[,2] <- cut(data[,2],breaks=4)
#levels(data[,2])

#prints the percentage
#print((tester(builder(trainData), testData) / nrow(testData) * 100))