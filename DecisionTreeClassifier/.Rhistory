install.packages("party")
q()
install.packages("tree")
q()
install.packages("tree")
q()
data <- read.csv("../iris.data", header=F)
tr <- tree(V5 ~ V1 + V2 + V3 + V4, data=data)
library("tree")
tr <- tree(V5 ~ V1 + V2 + V3 + V4, data=data)
plot(tr)
text(tr)
q()
-(3/5)*log2(3/5)-(2/5)(log2(2/5))
-(3/5)*log2(3/5)-(2/5)*(log2(2/5))
-(4/5)*log2(4/5)-(1/5)*(log2(1/5))
-(199/200)*log2(199/200)-(1/200)*(log2(1/200))
-(198/200)*log2(198/200)-(2/200)*(log2(2/200))
-(4/5)*log2(4/5)-(1/5)*(log2(0))
(log2(0))
(log2(-1))
(log2(0))
b <- [a, a, a]
b <- r(a, a, a)
b <- c(a, a, a)
b <- c('a', 'a', 'a')
cut(b, breaks=2)
b <- c(1, 1, 1)
cut(b, breaks=2)
b <- c(1, 1, 1, 1)
cut(b, breaks=2)
-(1/3)*log2(1/3)-(2/3)*(log2(2/3))
-(4/7)*log2(4/7)-(3/7)*(log2(3/7))
4/7*.811+3/7*.918
q()
source("decisionTree.R"
)\
source("decisionTree.R")(
)
source("decisionTree.R")
-(1/3)*log2(1/3)-(2/3)*(log2(2/3))
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
source("decisionTree.R")
-(1/3)*log2(1/3)-(2/3)*(log2(2/3))
-(1/3)*log2(1/3)-(2/3)*(log2(2/3))
source("decisionTree.R")
source("decisionTree.R")
q()
-(5/13)*log2(5/13)-(8/13)*(log2(8/13))
-(2/4)*log2(2/4)-(2/4)*(log2(2/4)) - (2/5)*log2(2/5)-(3/5)*log2(3/5) - (1/4)*log2(1/4) - (3/4)*log2(3/4)
-(2/4)*log2(2/4)-(2/4)*(log2(2/4)) + (2/5)*log2(2/5)-(3/5)*log2(3/5) + (1/4)*log2(1/4) - (3/4)*log2(3/4)
-(2/4)*log2(2/4)-(2/4)*(log2(2/4)) - (2/5)*log2(2/5)-(3/5)*log2(3/5) - (1/4)*log2(1/4) - (3/4)*log2(3/4)
-(2/4)*log2(2/4)-(2/4)*(log2(2/4)) + (2/5)*log2(2/5)-(3/5)*log2(3/5) + (1/4)*log2(1/4) - (3/4)*log2(3/4)
(2/4)*log2(2/4)-(2/4)*(log2(2/4)) + (2/5)*log2(2/5)-(3/5)*log2(3/5) + (1/4)*log2(1/4) - (3/4)*log2(3/4)
-(5/13)*log2(5/13)-(8/13)*(log2(8/13)) - ((2/4)*log2(2/4)-(2/4)*(log2(2/4)) + (2/5)*log2(2/5)-(3/5)*log2(3/5) + (1/4)*log2(1/4) - (3/4)*log2(3/4))
-(5/13)*log2(5/13)-(8/13)*(log2(8/13)) - (-(2/4)*log2(2/4)-(2/4)*(log2(2/4)) - (2/5)*log2(2/5)-(3/5)*log2(3/5) - (1/4)*log2(1/4) - (3/4)*log2(3/4))
-(2/4)*log2(2/4)-(2/4)*(log2(2/4))
- (2/5)*log2(2/5)-(3/5)*log2(3/5)
- (1/4)*log2(1/4) - (3/4)*log2(3/4)
1+0.9709506+0.8112781
-(5/13)*log2(5/13)-(8/13)*(log2(8/13)) - (-(4/13)*((2/4)*log2(2/4)+(2/4)*(log2(2/4))) - 5/13*((2/5)*log2(2/5)+(3/5)*log2(3/5)) - 4/13*((1/4)*log2(1/4) - (3/4)*log2(3/4)))
-(5/13)*log2(5/13)-(8/13)*(log2(8/13)) -(1)
-(5/13)*log2(5/13)-(8/13)*(log2(8/13)) -(10/13)
-(5/13)*log2(5/13)-(8/13)*(log2(8/13)) -(6/13*(-4/6*log2(4/6)-2/6*log2(2/6) - 7/13*(-1/7*log2(1/7) - 6/7*log2(6/7)))
)
-(5/13)*log2(5/13)-(8/13)*(log2(8/13)) -(6/13*(-4/6*log2(4/6)-2/6*log2(2/6) - 7/13*(-1/7*log2(1/7) - 6/7*log2(6/7))))
q()
q()
-(50/150*log2(50/150))*3
-50/150*log2(50/150)-50/150*log2(50/150)-50/150*log2(50/150)
q()
q()
install(igraph)
install.package(igraph)
install.packages(igraph)
install.packages("igraph")
q()
g <- graph.empty() + vertices("foo", "bar", "bar2", "foobar2")
library(igraph)
g <- graph.empty() + vertices("foo", "bar", "bar2", "foobar2")
plot(g)
g <- g + edge("bar2", "bar")
plot(g)
g <- g + edge("foo2", "foo", label="this")
q()
s <- "owls(((Strix_aluco:4.2,Asio_otus:4.2):3.1,Athene_noctua:7.3):6.3,Tyto_alba:13.5);"
cat(s, file = "ex.tre", sep = "\n")
tree.owls <- read.tree("ex.tre")
str(tree.owls)
tree.owls
tree.owls <- read.tree("ex.tre", keep.multi = TRUE)
tree.owls
names(tree.owls)
unlink("ex.tre") # delete the file "ex.tre"
### Only the first three species using the option `text'
TREE <- "((Strix_aluco:4.2,Asio_otus:4.2):3.1,Athene_noctua:7.3);"
TREE
tree.owls.bis <- read.tree(text = TREE)
str(tree.owls.bis)
tree.owls.bis
library(ape)
import.package("ape")
install.package("ape")
install.packages("ape")
s <- "owls(((Strix_aluco:4.2,Asio_otus:4.2):3.1,Athene_noctua:7.3):6.3,Tyto_alba:13.5);"
cat(s, file = "ex.tre", sep = "\n")
tree.owls <- read.tree("ex.tre")
str(tree.owls)
tree.owls
tree.owls <- read.tree("ex.tre", keep.multi = TRUE)
tree.owls
names(tree.owls)
unlink("ex.tre") # delete the file "ex.tre"
### Only the first three species using the option `text'
TREE <- "((Strix_aluco:4.2,Asio_otus:4.2):3.1,Athene_noctua:7.3);"
TREE
tree.owls.bis <- read.tree(text = TREE)
str(tree.owls.bis)
tree.owls.bis
library(ape)
s <- "owls(((Strix_aluco:4.2,Asio_otus:4.2):3.1,Athene_noctua:7.3):6.3,Tyto_alba:13.5);"
cat(s, file = "ex.tre", sep = "\n")
tree.owls <- read.tree("ex.tre")
str(tree.owls)
tree.owls
tree.owls <- read.tree("ex.tre", keep.multi = TRUE)
tree.owls
names(tree.owls)
unlink("ex.tre") # delete the file "ex.tre"
### Only the first three species using the option `text'
TREE <- "((Strix_aluco:4.2,Asio_otus:4.2):3.1,Athene_noctua:7.3);"
TREE
tree.owls.bis <- read.tree(text = TREE)
str(tree.owls.bis)
tree.owls.bis
plot(tree.owls.bis)
plot(tree.owls.bis)
TREE
q()
a()
q()
library(party)
set.seed(290875)
airq <- subset(airquality, !is.na(Ozone))
airct <- ctree(Ozone ~ ., data = airq,
controls = ctree_control(maxsurrogate = 3))
### distribution of responses in the terminal nodes
plot(airq$Ozone ~ as.factor(where(airct)))
### get all terminal nodes from the tree
nodes(airct, unique(where(airct)))
### extract weights and compute predictions
pmean <- sapply(weights(airct), function(w) weighted.mean(airq$Ozone, w))
### the same as
drop(Predict(airct))
### or
unlist(treeresponse(airct))
### don't use the mean but the median as prediction in each terminal node
pmedian <- sapply(weights(airct), function(w)
median(airq$Ozone[rep(1:nrow(airq), w)]))
plot(airq$Ozone, pmean, col = "red")
points(airq$Ozone, pmedian, col = "blue")
r <- list("a", "b", "c")
rlist <- c(r, r, list(r, r, r))
print(rlist)
r <- list("a", c("aa", "ab", "ac"))
r
r <- list("a", c(r, "ab", "ac"))
r
q()
